// Generated by @wagmi/cli@1.3.0 on 8/7/2023 at 9:44:48 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

import {
  getContract,
  GetContractArgs,
  readContract,
  ReadContractConfig,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// zora721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const zora721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      {
        name: '_zoraERC721TransferHelper',
        internalType: 'address',
        type: 'address',
      },
      {
        name: '_factoryUpgradeGate',
        internalType: 'contract IFactoryUpgradeGate',
        type: 'address',
      },
      {
        name: '_marketFilterDAOAddress',
        internalType: 'address',
        type: 'address',
      },
      { name: '_mintFeeAmount', internalType: 'uint256', type: 'uint256' },
      {
        name: '_mintFeeRecipient',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_protocolRewards', internalType: 'address', type: 'address' },
    ],
  },
  {
    type: 'error',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'Access_MissingRoleOrAdmin',
  },
  { type: 'error', inputs: [], name: 'Access_OnlyAdmin' },
  { type: 'error', inputs: [], name: 'Access_WithdrawNotAllowed' },
  {
    type: 'error',
    inputs: [
      { name: 'proposedAddress', internalType: 'address', type: 'address' },
    ],
    name: 'Admin_InvalidUpgradeAddress',
  },
  { type: 'error', inputs: [], name: 'Admin_UnableToFinalizeNotOpenEdition' },
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'ApprovalToCurrentOwner' },
  { type: 'error', inputs: [], name: 'ApproveToCaller' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'CREATOR_FUNDS_RECIPIENT_NOT_SET' },
  { type: 'error', inputs: [], name: 'ExternalMetadataRenderer_CallFailed' },
  { type: 'error', inputs: [], name: 'INVALID_ADDRESS_ZERO' },
  { type: 'error', inputs: [], name: 'INVALID_ETH_AMOUNT' },
  { type: 'error', inputs: [], name: 'InvalidMintSchedule' },
  {
    type: 'error',
    inputs: [],
    name: 'MarketFilterDAOAddressNotSupportedForChain',
  },
  { type: 'error', inputs: [], name: 'MintFee_FundsSendFailure' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'Mint_SoldOut' },
  { type: 'error', inputs: [], name: 'ONLY_CREATE_REFERRAL' },
  { type: 'error', inputs: [], name: 'ONLY_OWNER' },
  { type: 'error', inputs: [], name: 'ONLY_PENDING_OWNER' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'Presale_Inactive' },
  { type: 'error', inputs: [], name: 'Presale_MerkleNotApproved' },
  { type: 'error', inputs: [], name: 'Presale_TooManyForAddress' },
  { type: 'error', inputs: [], name: 'ProtocolRewards_WithdrawSendFailure' },
  { type: 'error', inputs: [], name: 'Purchase_TooManyForAddress' },
  {
    type: 'error',
    inputs: [
      { name: 'correctPrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'Purchase_WrongPrice',
  },
  { type: 'error', inputs: [], name: 'RemoteOperatorFilterRegistryCallFailed' },
  { type: 'error', inputs: [], name: 'Sale_Inactive' },
  {
    type: 'error',
    inputs: [{ name: 'maxRoyaltyBPS', internalType: 'uint16', type: 'uint16' }],
    name: 'Setup_RoyaltyPercentageTooHigh',
  },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'Withdraw_FundsSendFailure' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_fromTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: '_toTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'BatchMetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'source',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FundsReceived',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'changedBy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'FundsRecipientChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'withdrawnBy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawnTo',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'feeRecipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'feeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FundsWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MetadataUpdate',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenContract',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'quantity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'comment',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'MintComment',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'mintFeeAmount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'mintFeeRecipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'success', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'MintFeePayout',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'numberOfMints',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'OpenMintFinalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'potentialNewOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerCanceled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'potentialNewOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerPending',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'quantity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'pricePerToken',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'firstPurchasedTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Sale',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'changedBy',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SalesConfigChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'renderer',
        internalType: 'contract IMetadataRenderer',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'UpdatedMetadataRenderer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'SALES_MANAGER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'adminMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'adminMintAirdrop',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes', type: 'bytes' }],
    name: 'callMetadataRenderer',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'numTokens', internalType: 'uint256', type: 'uint256' }],
    name: 'computeFreeMintRewards',
    outputs: [
      {
        name: '',
        internalType: 'struct RewardsSettings',
        type: 'tuple',
        components: [
          { name: 'creatorReward', internalType: 'uint256', type: 'uint256' },
          {
            name: 'createReferralReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintReferralReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'firstMinterReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'zoraReward', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'numTokens', internalType: 'uint256', type: 'uint256' }],
    name: 'computePaidMintRewards',
    outputs: [
      {
        name: '',
        internalType: 'struct RewardsSettings',
        type: 'tuple',
        components: [
          { name: 'creatorReward', internalType: 'uint256', type: 'uint256' },
          {
            name: 'createReferralReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'mintReferralReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'firstMinterReward',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'zoraReward', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'numTokens', internalType: 'uint256', type: 'uint256' }],
    name: 'computeTotalReward',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'config',
    outputs: [
      {
        name: 'metadataRenderer',
        internalType: 'contract IMetadataRenderer',
        type: 'address',
      },
      { name: 'editionSize', internalType: 'uint64', type: 'uint64' },
      { name: 'royaltyBPS', internalType: 'uint16', type: 'uint16' },
      {
        name: 'fundsRecipient',
        internalType: 'address payable',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractVersion',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'createReferral',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factoryUpgradeGate',
    outputs: [
      {
        name: '',
        internalType: 'contract IFactoryUpgradeGate',
        type: 'address',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'finalizeOpenEdition',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_contractName', internalType: 'string', type: 'string' },
      { name: '_contractSymbol', internalType: 'string', type: 'string' },
      { name: '_initialOwner', internalType: 'address', type: 'address' },
      {
        name: '_fundsRecipient',
        internalType: 'address payable',
        type: 'address',
      },
      { name: '_editionSize', internalType: 'uint64', type: 'uint64' },
      { name: '_royaltyBPS', internalType: 'uint16', type: 'uint16' },
      { name: '_setupCalls', internalType: 'bytes[]', type: 'bytes[]' },
      {
        name: '_metadataRenderer',
        internalType: 'contract IMetadataRenderer',
        type: 'address',
      },
      { name: '_metadataRendererInit', internalType: 'bytes', type: 'bytes' },
      { name: '_createReferral', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'user', internalType: 'address', type: 'address' }],
    name: 'isAdmin',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'nftOwner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'enable', internalType: 'bool', type: 'bool' }],
    name: 'manageMarketFilterDAOSubscription',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketFilterDAOAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'metadataRenderer',
    outputs: [
      { name: '', internalType: 'contract IMetadataRenderer', type: 'address' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
      { name: 'mintReferral', internalType: 'address', type: 'address' },
    ],
    name: 'mintWithRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'mintedPerAddress',
    outputs: [
      {
        name: '',
        internalType: 'struct IERC721Drop.AddressMintDetails',
        type: 'tuple',
        components: [
          { name: 'totalMints', internalType: 'uint256', type: 'uint256' },
          { name: 'presaleMints', internalType: 'uint256', type: 'uint256' },
          { name: 'publicMints', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'presaleMintsByAddress',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'quantity', internalType: 'uint256', type: 'uint256' }],
    name: 'purchase',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'maxQuantity', internalType: 'uint256', type: 'uint256' },
      { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
    name: 'purchasePresale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'maxQuantity', internalType: 'uint256', type: 'uint256' },
      { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'purchasePresaleWithComment',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'maxQuantity', internalType: 'uint256', type: 'uint256' },
      { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleProof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'comment', internalType: 'string', type: 'string' },
      { name: 'mintReferral', internalType: 'address', type: 'address' },
    ],
    name: 'purchasePresaleWithRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'purchaseWithComment',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'quantity', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'purchaseWithRecipient',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '_salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'royaltyMintSchedule',
    outputs: [{ name: '', internalType: 'uint32', type: 'uint32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'saleDetails',
    outputs: [
      {
        name: '',
        internalType: 'struct IERC721Drop.SaleDetails',
        type: 'tuple',
        components: [
          { name: 'publicSaleActive', internalType: 'bool', type: 'bool' },
          { name: 'presaleActive', internalType: 'bool', type: 'bool' },
          { name: 'publicSalePrice', internalType: 'uint256', type: 'uint256' },
          { name: 'publicSaleStart', internalType: 'uint64', type: 'uint64' },
          { name: 'publicSaleEnd', internalType: 'uint64', type: 'uint64' },
          { name: 'presaleStart', internalType: 'uint64', type: 'uint64' },
          { name: 'presaleEnd', internalType: 'uint64', type: 'uint64' },
          {
            name: 'presaleMerkleRoot',
            internalType: 'bytes32',
            type: 'bytes32',
          },
          {
            name: 'maxSalePurchasePerAddress',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'totalMinted', internalType: 'uint256', type: 'uint256' },
          { name: 'maxSupply', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'salesConfig',
    outputs: [
      { name: 'publicSalePrice', internalType: 'uint104', type: 'uint104' },
      {
        name: 'maxSalePurchasePerAddress',
        internalType: 'uint32',
        type: 'uint32',
      },
      { name: 'publicSaleStart', internalType: 'uint64', type: 'uint64' },
      { name: 'publicSaleEnd', internalType: 'uint64', type: 'uint64' },
      { name: 'presaleStart', internalType: 'uint64', type: 'uint64' },
      { name: 'presaleEnd', internalType: 'uint64', type: 'uint64' },
      { name: 'presaleMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newRecipientAddress',
        internalType: 'address payable',
        type: 'address',
      },
    ],
    name: 'setFundsRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newRenderer',
        internalType: 'contract IMetadataRenderer',
        type: 'address',
      },
      { name: 'setupRenderer', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'setMetadataRenderer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'publicSalePrice', internalType: 'uint104', type: 'uint104' },
      {
        name: 'maxSalePurchasePerAddress',
        internalType: 'uint32',
        type: 'uint32',
      },
      { name: 'publicSaleStart', internalType: 'uint64', type: 'uint64' },
      { name: 'publicSaleEnd', internalType: 'uint64', type: 'uint64' },
      { name: 'presaleStart', internalType: 'uint64', type: 'uint64' },
      { name: 'presaleEnd', internalType: 'uint64', type: 'uint64' },
      { name: 'presaleMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setSaleConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'updateCreateReferral',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'args', internalType: 'bytes', type: 'bytes' }],
    name: 'updateMarketFilterSettings',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newSchedule', internalType: 'uint32', type: 'uint32' }],
    name: 'updateRoyaltyMintSchedule',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdrawRewards',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'zoraERC721TransferHelper',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'quantity', internalType: 'uint256', type: 'uint256' }],
    name: 'zoraFeeForAmount',
    outputs: [
      { name: 'recipient', internalType: 'address payable', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TW721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tw721ABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'ApprovalToCurrentOwner' },
  { type: 'error', inputs: [], name: 'ApproveToCaller' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimConditions',
        internalType: 'struct IClaimCondition.ClaimCondition[]',
        type: 'tuple[]',
        components: [
          { name: 'startTimestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxClaimableSupply',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'supplyClaimed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
      {
        name: 'resetEligibility',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ClaimConditionsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'prevURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ContractURIUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRoyaltyRecipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newRoyaltyBps',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DefaultRoyalty',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'platformFeeRecipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'flatFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlatPlatformFeeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'restriction',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'OperatorRestriction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'prevOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'platformFeeRecipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'platformFeeBps',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PlatformFeeInfoUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeType',
        internalType: 'enum IPlatformFee.PlatformFeeType',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PlatformFeeTypeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PrimarySaleRecipientUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'royaltyRecipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyBps',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RoyaltyForToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'imageURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'animationURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'SharedMetadataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimConditionIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'quantityClaimed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokensClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_receiver', internalType: 'address', type: 'address' },
      { name: '_quantity', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'address', type: 'address' },
      { name: '_pricePerToken', internalType: 'uint256', type: 'uint256' },
      {
        name: '_allowlistProof',
        internalType: 'struct IDrop.AllowlistProof',
        type: 'tuple',
        components: [
          { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
        ],
      },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'claimCondition',
    outputs: [
      { name: 'currentStartId', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveClaimConditionId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_conditionId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getClaimConditionById',
    outputs: [
      {
        name: 'condition',
        internalType: 'struct IClaimCondition.ClaimCondition',
        type: 'tuple',
        components: [
          { name: 'startTimestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxClaimableSupply',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'supplyClaimed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDefaultRoyaltyInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFlatPlatformFeeInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPlatformFeeInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPlatformFeeType',
    outputs: [
      {
        name: '',
        internalType: 'enum IPlatformFee.PlatformFeeType',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: 'member', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getRoyaltyInfoForToken',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_conditionId', internalType: 'uint256', type: 'uint256' },
      { name: '_claimer', internalType: 'address', type: 'address' },
    ],
    name: 'getSupplyClaimedByWallet',
    outputs: [
      {
        name: 'supplyClaimedByWallet',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRoleWithSwitch',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_defaultAdmin', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_contractURI', internalType: 'string', type: 'string' },
      {
        name: '_trustedForwarders',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_saleRecipient', internalType: 'address', type: 'address' },
      { name: '_royaltyRecipient', internalType: 'address', type: 'address' },
      { name: '_royaltyBps', internalType: 'uint128', type: 'uint128' },
      { name: '_platformFeeBps', internalType: 'uint128', type: 'uint128' },
      {
        name: '_platformFeeRecipient',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTokenIdToClaim',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTokenIdToMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorRestriction',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'primarySaleRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_conditions',
        internalType: 'struct IClaimCondition.ClaimCondition[]',
        type: 'tuple[]',
        components: [
          { name: 'startTimestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxClaimableSupply',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'supplyClaimed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_resetClaimEligibility', internalType: 'bool', type: 'bool' },
    ],
    name: 'setClaimConditions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setContractURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_royaltyRecipient', internalType: 'address', type: 'address' },
      { name: '_royaltyBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDefaultRoyaltyInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_platformFeeRecipient',
        internalType: 'address',
        type: 'address',
      },
      { name: '_flatFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFlatPlatformFeeInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_restriction', internalType: 'bool', type: 'bool' }],
    name: 'setOperatorRestriction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newOwner', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_platformFeeRecipient',
        internalType: 'address',
        type: 'address',
      },
      { name: '_platformFeeBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPlatformFeeInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_feeType',
        internalType: 'enum IPlatformFee.PlatformFeeType',
        type: 'uint8',
      },
    ],
    name: 'setPlatformFeeType',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_saleRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'setPrimarySaleRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_bps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoyaltyInfoForToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_metadata',
        internalType: 'struct ISharedMetadata.SharedMetadataInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'imageURI', internalType: 'string', type: 'string' },
          { name: 'animationURI', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'setSharedMetadata',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharedMetadata',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      { name: 'imageURI', internalType: 'string', type: 'string' },
      { name: 'animationURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'startTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_subscription', internalType: 'address', type: 'address' },
    ],
    name: 'subscribeToRegistry',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalMinted',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_conditionId', internalType: 'uint256', type: 'uint256' },
      { name: '_claimer', internalType: 'address', type: 'address' },
      { name: '_quantity', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'address', type: 'address' },
      { name: '_pricePerToken', internalType: 'uint256', type: 'uint256' },
      {
        name: '_allowlistProof',
        internalType: 'struct IDrop.AllowlistProof',
        type: 'tuple',
        components: [
          { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'verifyClaim',
    outputs: [{ name: 'isOverride', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__.
 */
export function useZora721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useZora721DefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useZora721MinterRole<
  TFunctionName extends 'MINTER_ROLE',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'MINTER_ROLE',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"SALES_MANAGER_ROLE"`.
 */
export function useZora721SalesManagerRole<
  TFunctionName extends 'SALES_MANAGER_ROLE',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'SALES_MANAGER_ROLE',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useZora721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"computeFreeMintRewards"`.
 */
export function useZora721ComputeFreeMintRewards<
  TFunctionName extends 'computeFreeMintRewards',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'computeFreeMintRewards',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"computePaidMintRewards"`.
 */
export function useZora721ComputePaidMintRewards<
  TFunctionName extends 'computePaidMintRewards',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'computePaidMintRewards',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"computeTotalReward"`.
 */
export function useZora721ComputeTotalReward<
  TFunctionName extends 'computeTotalReward',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'computeTotalReward',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"config"`.
 */
export function useZora721Config<
  TFunctionName extends 'config',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'config',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"contractURI"`.
 */
export function useZora721ContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"contractVersion"`.
 */
export function useZora721ContractVersion<
  TFunctionName extends 'contractVersion',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'contractVersion',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"createReferral"`.
 */
export function useZora721CreateReferral<
  TFunctionName extends 'createReferral',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'createReferral',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"factoryUpgradeGate"`.
 */
export function useZora721FactoryUpgradeGate<
  TFunctionName extends 'factoryUpgradeGate',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'factoryUpgradeGate',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useZora721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useZora721GetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"hasRole"`.
 */
export function useZora721HasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"isAdmin"`.
 */
export function useZora721IsAdmin<
  TFunctionName extends 'isAdmin',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'isAdmin',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useZora721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"marketFilterDAOAddress"`.
 */
export function useZora721MarketFilterDaoAddress<
  TFunctionName extends 'marketFilterDAOAddress',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'marketFilterDAOAddress',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"metadataRenderer"`.
 */
export function useZora721MetadataRenderer<
  TFunctionName extends 'metadataRenderer',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'metadataRenderer',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"mintedPerAddress"`.
 */
export function useZora721MintedPerAddress<
  TFunctionName extends 'mintedPerAddress',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'mintedPerAddress',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"name"`.
 */
export function useZora721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"owner"`.
 */
export function useZora721Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useZora721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"presaleMintsByAddress"`.
 */
export function useZora721PresaleMintsByAddress<
  TFunctionName extends 'presaleMintsByAddress',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'presaleMintsByAddress',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useZora721ProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useZora721RoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"royaltyMintSchedule"`.
 */
export function useZora721RoyaltyMintSchedule<
  TFunctionName extends 'royaltyMintSchedule',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'royaltyMintSchedule',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"saleDetails"`.
 */
export function useZora721SaleDetails<
  TFunctionName extends 'saleDetails',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'saleDetails',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"salesConfig"`.
 */
export function useZora721SalesConfig<
  TFunctionName extends 'salesConfig',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'salesConfig',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useZora721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useZora721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useZora721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useZora721TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"zoraERC721TransferHelper"`.
 */
export function useZora721ZoraErc721TransferHelper<
  TFunctionName extends 'zoraERC721TransferHelper',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'zoraERC721TransferHelper',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"zoraFeeForAmount"`.
 */
export function useZora721ZoraFeeForAmount<
  TFunctionName extends 'zoraFeeForAmount',
  TSelectData = ReadContractResult<typeof zora721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: zora721ABI,
    functionName: 'zoraFeeForAmount',
    ...config,
  } as UseContractReadConfig<typeof zora721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__.
 */
export function useZora721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof zora721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof zora721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, TFunctionName, TMode>({
    abi: zora721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"adminMint"`.
 */
export function useZora721AdminMint<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'adminMint'
        >['request']['abi'],
        'adminMint',
        TMode
      > & { functionName?: 'adminMint' }
    : UseContractWriteConfig<typeof zora721ABI, 'adminMint', TMode> & {
        abi?: never
        functionName?: 'adminMint'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'adminMint', TMode>({
    abi: zora721ABI,
    functionName: 'adminMint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"adminMintAirdrop"`.
 */
export function useZora721AdminMintAirdrop<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'adminMintAirdrop'
        >['request']['abi'],
        'adminMintAirdrop',
        TMode
      > & { functionName?: 'adminMintAirdrop' }
    : UseContractWriteConfig<typeof zora721ABI, 'adminMintAirdrop', TMode> & {
        abi?: never
        functionName?: 'adminMintAirdrop'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'adminMintAirdrop', TMode>({
    abi: zora721ABI,
    functionName: 'adminMintAirdrop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"approve"`.
 */
export function useZora721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof zora721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'approve', TMode>({
    abi: zora721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"burn"`.
 */
export function useZora721Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof zora721ABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof zora721ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'burn', TMode>({
    abi: zora721ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"callMetadataRenderer"`.
 */
export function useZora721CallMetadataRenderer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'callMetadataRenderer'
        >['request']['abi'],
        'callMetadataRenderer',
        TMode
      > & { functionName?: 'callMetadataRenderer' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'callMetadataRenderer',
        TMode
      > & {
        abi?: never
        functionName?: 'callMetadataRenderer'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'callMetadataRenderer', TMode>({
    abi: zora721ABI,
    functionName: 'callMetadataRenderer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"finalizeOpenEdition"`.
 */
export function useZora721FinalizeOpenEdition<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'finalizeOpenEdition'
        >['request']['abi'],
        'finalizeOpenEdition',
        TMode
      > & { functionName?: 'finalizeOpenEdition' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'finalizeOpenEdition',
        TMode
      > & {
        abi?: never
        functionName?: 'finalizeOpenEdition'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'finalizeOpenEdition', TMode>({
    abi: zora721ABI,
    functionName: 'finalizeOpenEdition',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"grantRole"`.
 */
export function useZora721GrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof zora721ABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'grantRole', TMode>({
    abi: zora721ABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"initialize"`.
 */
export function useZora721Initialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof zora721ABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'initialize', TMode>({
    abi: zora721ABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"manageMarketFilterDAOSubscription"`.
 */
export function useZora721ManageMarketFilterDaoSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'manageMarketFilterDAOSubscription'
        >['request']['abi'],
        'manageMarketFilterDAOSubscription',
        TMode
      > & { functionName?: 'manageMarketFilterDAOSubscription' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'manageMarketFilterDAOSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'manageMarketFilterDAOSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof zora721ABI,
    'manageMarketFilterDAOSubscription',
    TMode
  >({
    abi: zora721ABI,
    functionName: 'manageMarketFilterDAOSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"mintWithRewards"`.
 */
export function useZora721MintWithRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'mintWithRewards'
        >['request']['abi'],
        'mintWithRewards',
        TMode
      > & { functionName?: 'mintWithRewards' }
    : UseContractWriteConfig<typeof zora721ABI, 'mintWithRewards', TMode> & {
        abi?: never
        functionName?: 'mintWithRewards'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'mintWithRewards', TMode>({
    abi: zora721ABI,
    functionName: 'mintWithRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"multicall"`.
 */
export function useZora721Multicall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'multicall'
        >['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<typeof zora721ABI, 'multicall', TMode> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'multicall', TMode>({
    abi: zora721ABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchase"`.
 */
export function useZora721Purchase<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'purchase'
        >['request']['abi'],
        'purchase',
        TMode
      > & { functionName?: 'purchase' }
    : UseContractWriteConfig<typeof zora721ABI, 'purchase', TMode> & {
        abi?: never
        functionName?: 'purchase'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'purchase', TMode>({
    abi: zora721ABI,
    functionName: 'purchase',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchasePresale"`.
 */
export function useZora721PurchasePresale<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'purchasePresale'
        >['request']['abi'],
        'purchasePresale',
        TMode
      > & { functionName?: 'purchasePresale' }
    : UseContractWriteConfig<typeof zora721ABI, 'purchasePresale', TMode> & {
        abi?: never
        functionName?: 'purchasePresale'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'purchasePresale', TMode>({
    abi: zora721ABI,
    functionName: 'purchasePresale',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchasePresaleWithComment"`.
 */
export function useZora721PurchasePresaleWithComment<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'purchasePresaleWithComment'
        >['request']['abi'],
        'purchasePresaleWithComment',
        TMode
      > & { functionName?: 'purchasePresaleWithComment' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'purchasePresaleWithComment',
        TMode
      > & {
        abi?: never
        functionName?: 'purchasePresaleWithComment'
      } = {} as any,
) {
  return useContractWrite<
    typeof zora721ABI,
    'purchasePresaleWithComment',
    TMode
  >({
    abi: zora721ABI,
    functionName: 'purchasePresaleWithComment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchasePresaleWithRewards"`.
 */
export function useZora721PurchasePresaleWithRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'purchasePresaleWithRewards'
        >['request']['abi'],
        'purchasePresaleWithRewards',
        TMode
      > & { functionName?: 'purchasePresaleWithRewards' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'purchasePresaleWithRewards',
        TMode
      > & {
        abi?: never
        functionName?: 'purchasePresaleWithRewards'
      } = {} as any,
) {
  return useContractWrite<
    typeof zora721ABI,
    'purchasePresaleWithRewards',
    TMode
  >({
    abi: zora721ABI,
    functionName: 'purchasePresaleWithRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchaseWithComment"`.
 */
export function useZora721PurchaseWithComment<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'purchaseWithComment'
        >['request']['abi'],
        'purchaseWithComment',
        TMode
      > & { functionName?: 'purchaseWithComment' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'purchaseWithComment',
        TMode
      > & {
        abi?: never
        functionName?: 'purchaseWithComment'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'purchaseWithComment', TMode>({
    abi: zora721ABI,
    functionName: 'purchaseWithComment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchaseWithRecipient"`.
 */
export function useZora721PurchaseWithRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'purchaseWithRecipient'
        >['request']['abi'],
        'purchaseWithRecipient',
        TMode
      > & { functionName?: 'purchaseWithRecipient' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'purchaseWithRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'purchaseWithRecipient'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'purchaseWithRecipient', TMode>({
    abi: zora721ABI,
    functionName: 'purchaseWithRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useZora721RenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof zora721ABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'renounceRole', TMode>({
    abi: zora721ABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useZora721RevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof zora721ABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'revokeRole', TMode>({
    abi: zora721ABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useZora721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof zora721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'safeTransferFrom', TMode>({
    abi: zora721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useZora721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof zora721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'setApprovalForAll', TMode>({
    abi: zora721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setFundsRecipient"`.
 */
export function useZora721SetFundsRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'setFundsRecipient'
        >['request']['abi'],
        'setFundsRecipient',
        TMode
      > & { functionName?: 'setFundsRecipient' }
    : UseContractWriteConfig<typeof zora721ABI, 'setFundsRecipient', TMode> & {
        abi?: never
        functionName?: 'setFundsRecipient'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'setFundsRecipient', TMode>({
    abi: zora721ABI,
    functionName: 'setFundsRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setMetadataRenderer"`.
 */
export function useZora721SetMetadataRenderer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'setMetadataRenderer'
        >['request']['abi'],
        'setMetadataRenderer',
        TMode
      > & { functionName?: 'setMetadataRenderer' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'setMetadataRenderer',
        TMode
      > & {
        abi?: never
        functionName?: 'setMetadataRenderer'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'setMetadataRenderer', TMode>({
    abi: zora721ABI,
    functionName: 'setMetadataRenderer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setOwner"`.
 */
export function useZora721SetOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'setOwner'
        >['request']['abi'],
        'setOwner',
        TMode
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<typeof zora721ABI, 'setOwner', TMode> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'setOwner', TMode>({
    abi: zora721ABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setSaleConfiguration"`.
 */
export function useZora721SetSaleConfiguration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'setSaleConfiguration'
        >['request']['abi'],
        'setSaleConfiguration',
        TMode
      > & { functionName?: 'setSaleConfiguration' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'setSaleConfiguration',
        TMode
      > & {
        abi?: never
        functionName?: 'setSaleConfiguration'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'setSaleConfiguration', TMode>({
    abi: zora721ABI,
    functionName: 'setSaleConfiguration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useZora721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof zora721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'transferFrom', TMode>({
    abi: zora721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"updateCreateReferral"`.
 */
export function useZora721UpdateCreateReferral<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'updateCreateReferral'
        >['request']['abi'],
        'updateCreateReferral',
        TMode
      > & { functionName?: 'updateCreateReferral' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'updateCreateReferral',
        TMode
      > & {
        abi?: never
        functionName?: 'updateCreateReferral'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'updateCreateReferral', TMode>({
    abi: zora721ABI,
    functionName: 'updateCreateReferral',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"updateMarketFilterSettings"`.
 */
export function useZora721UpdateMarketFilterSettings<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'updateMarketFilterSettings'
        >['request']['abi'],
        'updateMarketFilterSettings',
        TMode
      > & { functionName?: 'updateMarketFilterSettings' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'updateMarketFilterSettings',
        TMode
      > & {
        abi?: never
        functionName?: 'updateMarketFilterSettings'
      } = {} as any,
) {
  return useContractWrite<
    typeof zora721ABI,
    'updateMarketFilterSettings',
    TMode
  >({
    abi: zora721ABI,
    functionName: 'updateMarketFilterSettings',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"updateRoyaltyMintSchedule"`.
 */
export function useZora721UpdateRoyaltyMintSchedule<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'updateRoyaltyMintSchedule'
        >['request']['abi'],
        'updateRoyaltyMintSchedule',
        TMode
      > & { functionName?: 'updateRoyaltyMintSchedule' }
    : UseContractWriteConfig<
        typeof zora721ABI,
        'updateRoyaltyMintSchedule',
        TMode
      > & {
        abi?: never
        functionName?: 'updateRoyaltyMintSchedule'
      } = {} as any,
) {
  return useContractWrite<
    typeof zora721ABI,
    'updateRoyaltyMintSchedule',
    TMode
  >({
    abi: zora721ABI,
    functionName: 'updateRoyaltyMintSchedule',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useZora721UpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof zora721ABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'upgradeTo', TMode>({
    abi: zora721ABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useZora721UpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof zora721ABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'upgradeToAndCall', TMode>({
    abi: zora721ABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"withdraw"`.
 */
export function useZora721Withdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof zora721ABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'withdraw', TMode>({
    abi: zora721ABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"withdrawRewards"`.
 */
export function useZora721WithdrawRewards<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof zora721ABI,
          'withdrawRewards'
        >['request']['abi'],
        'withdrawRewards',
        TMode
      > & { functionName?: 'withdrawRewards' }
    : UseContractWriteConfig<typeof zora721ABI, 'withdrawRewards', TMode> & {
        abi?: never
        functionName?: 'withdrawRewards'
      } = {} as any,
) {
  return useContractWrite<typeof zora721ABI, 'withdrawRewards', TMode>({
    abi: zora721ABI,
    functionName: 'withdrawRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__.
 */
export function usePrepareZora721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"adminMint"`.
 */
export function usePrepareZora721AdminMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'adminMint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'adminMint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'adminMint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"adminMintAirdrop"`.
 */
export function usePrepareZora721AdminMintAirdrop(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'adminMintAirdrop'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'adminMintAirdrop',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'adminMintAirdrop'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareZora721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareZora721Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"callMetadataRenderer"`.
 */
export function usePrepareZora721CallMetadataRenderer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'callMetadataRenderer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'callMetadataRenderer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'callMetadataRenderer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"finalizeOpenEdition"`.
 */
export function usePrepareZora721FinalizeOpenEdition(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'finalizeOpenEdition'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'finalizeOpenEdition',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'finalizeOpenEdition'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareZora721GrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareZora721Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"manageMarketFilterDAOSubscription"`.
 */
export function usePrepareZora721ManageMarketFilterDaoSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zora721ABI,
      'manageMarketFilterDAOSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'manageMarketFilterDAOSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zora721ABI,
    'manageMarketFilterDAOSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"mintWithRewards"`.
 */
export function usePrepareZora721MintWithRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'mintWithRewards'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'mintWithRewards',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'mintWithRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareZora721Multicall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchase"`.
 */
export function usePrepareZora721Purchase(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'purchase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'purchase',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'purchase'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchasePresale"`.
 */
export function usePrepareZora721PurchasePresale(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'purchasePresale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'purchasePresale',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'purchasePresale'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchasePresaleWithComment"`.
 */
export function usePrepareZora721PurchasePresaleWithComment(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zora721ABI,
      'purchasePresaleWithComment'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'purchasePresaleWithComment',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zora721ABI,
    'purchasePresaleWithComment'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchasePresaleWithRewards"`.
 */
export function usePrepareZora721PurchasePresaleWithRewards(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zora721ABI,
      'purchasePresaleWithRewards'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'purchasePresaleWithRewards',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zora721ABI,
    'purchasePresaleWithRewards'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchaseWithComment"`.
 */
export function usePrepareZora721PurchaseWithComment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'purchaseWithComment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'purchaseWithComment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'purchaseWithComment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"purchaseWithRecipient"`.
 */
export function usePrepareZora721PurchaseWithRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'purchaseWithRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'purchaseWithRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zora721ABI,
    'purchaseWithRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareZora721RenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareZora721RevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareZora721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareZora721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setFundsRecipient"`.
 */
export function usePrepareZora721SetFundsRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'setFundsRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'setFundsRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'setFundsRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setMetadataRenderer"`.
 */
export function usePrepareZora721SetMetadataRenderer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'setMetadataRenderer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'setMetadataRenderer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'setMetadataRenderer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareZora721SetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"setSaleConfiguration"`.
 */
export function usePrepareZora721SetSaleConfiguration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'setSaleConfiguration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'setSaleConfiguration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'setSaleConfiguration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareZora721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"updateCreateReferral"`.
 */
export function usePrepareZora721UpdateCreateReferral(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'updateCreateReferral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'updateCreateReferral',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'updateCreateReferral'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"updateMarketFilterSettings"`.
 */
export function usePrepareZora721UpdateMarketFilterSettings(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zora721ABI,
      'updateMarketFilterSettings'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'updateMarketFilterSettings',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zora721ABI,
    'updateMarketFilterSettings'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"updateRoyaltyMintSchedule"`.
 */
export function usePrepareZora721UpdateRoyaltyMintSchedule(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof zora721ABI,
      'updateRoyaltyMintSchedule'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'updateRoyaltyMintSchedule',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof zora721ABI,
    'updateRoyaltyMintSchedule'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareZora721UpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareZora721UpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareZora721Withdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link zora721ABI}__ and `functionName` set to `"withdrawRewards"`.
 */
export function usePrepareZora721WithdrawRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof zora721ABI, 'withdrawRewards'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: zora721ABI,
    functionName: 'withdrawRewards',
    ...config,
  } as UsePrepareContractWriteConfig<typeof zora721ABI, 'withdrawRewards'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__.
 */
export function useZora721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useZora721AdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useZora721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useZora721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"BatchMetadataUpdate"`.
 */
export function useZora721BatchMetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'BatchMetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'BatchMetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'BatchMetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useZora721BeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"FundsReceived"`.
 */
export function useZora721FundsReceivedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'FundsReceived'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'FundsReceived',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'FundsReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"FundsRecipientChanged"`.
 */
export function useZora721FundsRecipientChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'FundsRecipientChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'FundsRecipientChanged',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'FundsRecipientChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"FundsWithdrawn"`.
 */
export function useZora721FundsWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'FundsWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'FundsWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'FundsWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"MetadataUpdate"`.
 */
export function useZora721MetadataUpdateEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'MetadataUpdate'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'MetadataUpdate',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'MetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"MintComment"`.
 */
export function useZora721MintCommentEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'MintComment'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'MintComment',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'MintComment'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"MintFeePayout"`.
 */
export function useZora721MintFeePayoutEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'MintFeePayout'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'MintFeePayout',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'MintFeePayout'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"OpenMintFinalized"`.
 */
export function useZora721OpenMintFinalizedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'OpenMintFinalized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'OpenMintFinalized',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'OpenMintFinalized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"OwnerCanceled"`.
 */
export function useZora721OwnerCanceledEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'OwnerCanceled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'OwnerCanceled',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'OwnerCanceled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"OwnerPending"`.
 */
export function useZora721OwnerPendingEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'OwnerPending'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'OwnerPending',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'OwnerPending'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useZora721OwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useZora721RoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useZora721RoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useZora721RoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"Sale"`.
 */
export function useZora721SaleEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'Sale'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'Sale',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'Sale'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"SalesConfigChanged"`.
 */
export function useZora721SalesConfigChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'SalesConfigChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'SalesConfigChanged',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'SalesConfigChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useZora721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"UpdatedMetadataRenderer"`.
 */
export function useZora721UpdatedMetadataRendererEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'UpdatedMetadataRenderer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'UpdatedMetadataRenderer',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'UpdatedMetadataRenderer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link zora721ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useZora721UpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof zora721ABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: zora721ABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof zora721ABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__.
 */
export function useTw721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: tw721ABI, ...config } as UseContractReadConfig<
    typeof tw721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useTw721DefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTw721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"claimCondition"`.
 */
export function useTw721ClaimCondition<
  TFunctionName extends 'claimCondition',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'claimCondition',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"contractURI"`.
 */
export function useTw721ContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getActiveClaimConditionId"`.
 */
export function useTw721GetActiveClaimConditionId<
  TFunctionName extends 'getActiveClaimConditionId',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getActiveClaimConditionId',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useTw721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getClaimConditionById"`.
 */
export function useTw721GetClaimConditionById<
  TFunctionName extends 'getClaimConditionById',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getClaimConditionById',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getDefaultRoyaltyInfo"`.
 */
export function useTw721GetDefaultRoyaltyInfo<
  TFunctionName extends 'getDefaultRoyaltyInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getDefaultRoyaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getFlatPlatformFeeInfo"`.
 */
export function useTw721GetFlatPlatformFeeInfo<
  TFunctionName extends 'getFlatPlatformFeeInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getFlatPlatformFeeInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getPlatformFeeInfo"`.
 */
export function useTw721GetPlatformFeeInfo<
  TFunctionName extends 'getPlatformFeeInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getPlatformFeeInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getPlatformFeeType"`.
 */
export function useTw721GetPlatformFeeType<
  TFunctionName extends 'getPlatformFeeType',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getPlatformFeeType',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useTw721GetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useTw721GetRoleMember<
  TFunctionName extends 'getRoleMember',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useTw721GetRoleMemberCount<
  TFunctionName extends 'getRoleMemberCount',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoyaltyInfoForToken"`.
 */
export function useTw721GetRoyaltyInfoForToken<
  TFunctionName extends 'getRoyaltyInfoForToken',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoyaltyInfoForToken',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getSupplyClaimedByWallet"`.
 */
export function useTw721GetSupplyClaimedByWallet<
  TFunctionName extends 'getSupplyClaimedByWallet',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getSupplyClaimedByWallet',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"hasRole"`.
 */
export function useTw721HasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"hasRoleWithSwitch"`.
 */
export function useTw721HasRoleWithSwitch<
  TFunctionName extends 'hasRoleWithSwitch',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'hasRoleWithSwitch',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useTw721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useTw721IsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"name"`.
 */
export function useTw721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"nextTokenIdToClaim"`.
 */
export function useTw721NextTokenIdToClaim<
  TFunctionName extends 'nextTokenIdToClaim',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'nextTokenIdToClaim',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"nextTokenIdToMint"`.
 */
export function useTw721NextTokenIdToMint<
  TFunctionName extends 'nextTokenIdToMint',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'nextTokenIdToMint',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"operatorRestriction"`.
 */
export function useTw721OperatorRestriction<
  TFunctionName extends 'operatorRestriction',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'operatorRestriction',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"owner"`.
 */
export function useTw721Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useTw721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"primarySaleRecipient"`.
 */
export function useTw721PrimarySaleRecipient<
  TFunctionName extends 'primarySaleRecipient',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'primarySaleRecipient',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useTw721RoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"sharedMetadata"`.
 */
export function useTw721SharedMetadata<
  TFunctionName extends 'sharedMetadata',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'sharedMetadata',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"startTokenId"`.
 */
export function useTw721StartTokenId<
  TFunctionName extends 'startTokenId',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'startTokenId',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTw721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useTw721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useTw721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"totalMinted"`.
 */
export function useTw721TotalMinted<
  TFunctionName extends 'totalMinted',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'totalMinted',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTw721TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"verifyClaim"`.
 */
export function useTw721VerifyClaim<
  TFunctionName extends 'verifyClaim',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'verifyClaim',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__.
 */
export function useTw721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tw721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof tw721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, TFunctionName, TMode>({
    abi: tw721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"approve"`.
 */
export function useTw721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof tw721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'approve', TMode>({
    abi: tw721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"burn"`.
 */
export function useTw721Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tw721ABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof tw721ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'burn', TMode>({
    abi: tw721ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"claim"`.
 */
export function useTw721Claim<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tw721ABI, 'claim'>['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<typeof tw721ABI, 'claim', TMode> & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'claim', TMode>({
    abi: tw721ABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"grantRole"`.
 */
export function useTw721GrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof tw721ABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'grantRole', TMode>({
    abi: tw721ABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"initialize"`.
 */
export function useTw721Initialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof tw721ABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'initialize', TMode>({
    abi: tw721ABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"multicall"`.
 */
export function useTw721Multicall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'multicall'
        >['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<typeof tw721ABI, 'multicall', TMode> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'multicall', TMode>({
    abi: tw721ABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useTw721RenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof tw721ABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'renounceRole', TMode>({
    abi: tw721ABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useTw721RevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof tw721ABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'revokeRole', TMode>({
    abi: tw721ABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useTw721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof tw721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'safeTransferFrom', TMode>({
    abi: tw721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useTw721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof tw721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setApprovalForAll', TMode>({
    abi: tw721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setClaimConditions"`.
 */
export function useTw721SetClaimConditions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setClaimConditions'
        >['request']['abi'],
        'setClaimConditions',
        TMode
      > & { functionName?: 'setClaimConditions' }
    : UseContractWriteConfig<typeof tw721ABI, 'setClaimConditions', TMode> & {
        abi?: never
        functionName?: 'setClaimConditions'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setClaimConditions', TMode>({
    abi: tw721ABI,
    functionName: 'setClaimConditions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setContractURI"`.
 */
export function useTw721SetContractUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setContractURI'
        >['request']['abi'],
        'setContractURI',
        TMode
      > & { functionName?: 'setContractURI' }
    : UseContractWriteConfig<typeof tw721ABI, 'setContractURI', TMode> & {
        abi?: never
        functionName?: 'setContractURI'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setContractURI', TMode>({
    abi: tw721ABI,
    functionName: 'setContractURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setDefaultRoyaltyInfo"`.
 */
export function useTw721SetDefaultRoyaltyInfo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setDefaultRoyaltyInfo'
        >['request']['abi'],
        'setDefaultRoyaltyInfo',
        TMode
      > & { functionName?: 'setDefaultRoyaltyInfo' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setDefaultRoyaltyInfo',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultRoyaltyInfo'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setDefaultRoyaltyInfo', TMode>({
    abi: tw721ABI,
    functionName: 'setDefaultRoyaltyInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setFlatPlatformFeeInfo"`.
 */
export function useTw721SetFlatPlatformFeeInfo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setFlatPlatformFeeInfo'
        >['request']['abi'],
        'setFlatPlatformFeeInfo',
        TMode
      > & { functionName?: 'setFlatPlatformFeeInfo' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setFlatPlatformFeeInfo',
        TMode
      > & {
        abi?: never
        functionName?: 'setFlatPlatformFeeInfo'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setFlatPlatformFeeInfo', TMode>({
    abi: tw721ABI,
    functionName: 'setFlatPlatformFeeInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOperatorRestriction"`.
 */
export function useTw721SetOperatorRestriction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setOperatorRestriction'
        >['request']['abi'],
        'setOperatorRestriction',
        TMode
      > & { functionName?: 'setOperatorRestriction' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setOperatorRestriction',
        TMode
      > & {
        abi?: never
        functionName?: 'setOperatorRestriction'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setOperatorRestriction', TMode>({
    abi: tw721ABI,
    functionName: 'setOperatorRestriction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOwner"`.
 */
export function useTw721SetOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setOwner'
        >['request']['abi'],
        'setOwner',
        TMode
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<typeof tw721ABI, 'setOwner', TMode> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setOwner', TMode>({
    abi: tw721ABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeInfo"`.
 */
export function useTw721SetPlatformFeeInfo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setPlatformFeeInfo'
        >['request']['abi'],
        'setPlatformFeeInfo',
        TMode
      > & { functionName?: 'setPlatformFeeInfo' }
    : UseContractWriteConfig<typeof tw721ABI, 'setPlatformFeeInfo', TMode> & {
        abi?: never
        functionName?: 'setPlatformFeeInfo'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setPlatformFeeInfo', TMode>({
    abi: tw721ABI,
    functionName: 'setPlatformFeeInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeType"`.
 */
export function useTw721SetPlatformFeeType<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setPlatformFeeType'
        >['request']['abi'],
        'setPlatformFeeType',
        TMode
      > & { functionName?: 'setPlatformFeeType' }
    : UseContractWriteConfig<typeof tw721ABI, 'setPlatformFeeType', TMode> & {
        abi?: never
        functionName?: 'setPlatformFeeType'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setPlatformFeeType', TMode>({
    abi: tw721ABI,
    functionName: 'setPlatformFeeType',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPrimarySaleRecipient"`.
 */
export function useTw721SetPrimarySaleRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setPrimarySaleRecipient'
        >['request']['abi'],
        'setPrimarySaleRecipient',
        TMode
      > & { functionName?: 'setPrimarySaleRecipient' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setPrimarySaleRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'setPrimarySaleRecipient'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setPrimarySaleRecipient', TMode>({
    abi: tw721ABI,
    functionName: 'setPrimarySaleRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setRoyaltyInfoForToken"`.
 */
export function useTw721SetRoyaltyInfoForToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setRoyaltyInfoForToken'
        >['request']['abi'],
        'setRoyaltyInfoForToken',
        TMode
      > & { functionName?: 'setRoyaltyInfoForToken' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setRoyaltyInfoForToken',
        TMode
      > & {
        abi?: never
        functionName?: 'setRoyaltyInfoForToken'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setRoyaltyInfoForToken', TMode>({
    abi: tw721ABI,
    functionName: 'setRoyaltyInfoForToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setSharedMetadata"`.
 */
export function useTw721SetSharedMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setSharedMetadata'
        >['request']['abi'],
        'setSharedMetadata',
        TMode
      > & { functionName?: 'setSharedMetadata' }
    : UseContractWriteConfig<typeof tw721ABI, 'setSharedMetadata', TMode> & {
        abi?: never
        functionName?: 'setSharedMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setSharedMetadata', TMode>({
    abi: tw721ABI,
    functionName: 'setSharedMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"subscribeToRegistry"`.
 */
export function useTw721SubscribeToRegistry<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'subscribeToRegistry'
        >['request']['abi'],
        'subscribeToRegistry',
        TMode
      > & { functionName?: 'subscribeToRegistry' }
    : UseContractWriteConfig<typeof tw721ABI, 'subscribeToRegistry', TMode> & {
        abi?: never
        functionName?: 'subscribeToRegistry'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'subscribeToRegistry', TMode>({
    abi: tw721ABI,
    functionName: 'subscribeToRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTw721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof tw721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'transferFrom', TMode>({
    abi: tw721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__.
 */
export function usePrepareTw721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTw721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareTw721Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareTw721Claim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareTw721GrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareTw721Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareTw721Multicall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareTw721RenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareTw721RevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareTw721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareTw721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setClaimConditions"`.
 */
export function usePrepareTw721SetClaimConditions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setClaimConditions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setClaimConditions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setClaimConditions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setContractURI"`.
 */
export function usePrepareTw721SetContractUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setContractURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setContractURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setContractURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setDefaultRoyaltyInfo"`.
 */
export function usePrepareTw721SetDefaultRoyaltyInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setDefaultRoyaltyInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setDefaultRoyaltyInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setDefaultRoyaltyInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setFlatPlatformFeeInfo"`.
 */
export function usePrepareTw721SetFlatPlatformFeeInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setFlatPlatformFeeInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setFlatPlatformFeeInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setFlatPlatformFeeInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOperatorRestriction"`.
 */
export function usePrepareTw721SetOperatorRestriction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setOperatorRestriction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setOperatorRestriction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setOperatorRestriction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareTw721SetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeInfo"`.
 */
export function usePrepareTw721SetPlatformFeeInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setPlatformFeeInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeType"`.
 */
export function usePrepareTw721SetPlatformFeeType(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeType'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setPlatformFeeType',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeType'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPrimarySaleRecipient"`.
 */
export function usePrepareTw721SetPrimarySaleRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setPrimarySaleRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setPrimarySaleRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tw721ABI,
    'setPrimarySaleRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setRoyaltyInfoForToken"`.
 */
export function usePrepareTw721SetRoyaltyInfoForToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setRoyaltyInfoForToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setRoyaltyInfoForToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setRoyaltyInfoForToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setSharedMetadata"`.
 */
export function usePrepareTw721SetSharedMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setSharedMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setSharedMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setSharedMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"subscribeToRegistry"`.
 */
export function usePrepareTw721SubscribeToRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'subscribeToRegistry'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'subscribeToRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'subscribeToRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTw721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__.
 */
export function useTw721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useTw721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useTw721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"ClaimConditionsUpdated"`.
 */
export function useTw721ClaimConditionsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'ClaimConditionsUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'ClaimConditionsUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'ClaimConditionsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"ContractURIUpdated"`.
 */
export function useTw721ContractUriUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'ContractURIUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'ContractURIUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'ContractURIUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"DefaultRoyalty"`.
 */
export function useTw721DefaultRoyaltyEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'DefaultRoyalty'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'DefaultRoyalty',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'DefaultRoyalty'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"FlatPlatformFeeUpdated"`.
 */
export function useTw721FlatPlatformFeeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'FlatPlatformFeeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'FlatPlatformFeeUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'FlatPlatformFeeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useTw721InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"OperatorRestriction"`.
 */
export function useTw721OperatorRestrictionEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'OperatorRestriction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'OperatorRestriction',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'OperatorRestriction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"OwnerUpdated"`.
 */
export function useTw721OwnerUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'OwnerUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'OwnerUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'OwnerUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"PlatformFeeInfoUpdated"`.
 */
export function useTw721PlatformFeeInfoUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'PlatformFeeInfoUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'PlatformFeeInfoUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'PlatformFeeInfoUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"PlatformFeeTypeUpdated"`.
 */
export function useTw721PlatformFeeTypeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'PlatformFeeTypeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'PlatformFeeTypeUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'PlatformFeeTypeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"PrimarySaleRecipientUpdated"`.
 */
export function useTw721PrimarySaleRecipientUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'PrimarySaleRecipientUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'PrimarySaleRecipientUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'PrimarySaleRecipientUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useTw721RoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useTw721RoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useTw721RoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoyaltyForToken"`.
 */
export function useTw721RoyaltyForTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoyaltyForToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoyaltyForToken',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoyaltyForToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"SharedMetadataUpdated"`.
 */
export function useTw721SharedMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'SharedMetadataUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'SharedMetadataUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'SharedMetadataUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"TokensClaimed"`.
 */
export function useTw721TokensClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'TokensClaimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'TokensClaimed',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'TokensClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTw721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'Transfer'>)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link zora721ABI}__.
 */
export function getZora721(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: zora721ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link zora721ABI}__.
 */
export function readZora721<
  TAbi extends readonly unknown[] = typeof zora721ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: zora721ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link zora721ABI}__.
 */
export function writeZora721<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof zora721ABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof zora721ABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: zora721ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof zora721ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link zora721ABI}__.
 */
export function prepareWriteZora721<
  TAbi extends readonly unknown[] = typeof zora721ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: zora721ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link zora721ABI}__.
 */
export function watchZora721Event<
  TAbi extends readonly unknown[] = typeof zora721ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: zora721ABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link tw721ABI}__.
 */
export function getTw721(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: tw721ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link tw721ABI}__.
 */
export function readTw721<
  TAbi extends readonly unknown[] = typeof tw721ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: tw721ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link tw721ABI}__.
 */
export function writeTw721<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof tw721ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof tw721ABI, TFunctionName>, 'abi'>,
) {
  return writeContract({
    abi: tw721ABI,
    ...config,
  } as unknown as WriteContractArgs<typeof tw721ABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link tw721ABI}__.
 */
export function prepareWriteTw721<
  TAbi extends readonly unknown[] = typeof tw721ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: tw721ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link tw721ABI}__.
 */
export function watchTw721Event<
  TAbi extends readonly unknown[] = typeof tw721ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: tw721ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}
