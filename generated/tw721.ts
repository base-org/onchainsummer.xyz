// Generated by @wagmi/cli@1.3.0 on 7/29/2023 at 10:42:57 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TW721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tw721ABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'ApprovalToCurrentOwner' },
  { type: 'error', inputs: [], name: 'ApproveToCaller' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimConditions',
        internalType: 'struct IClaimCondition.ClaimCondition[]',
        type: 'tuple[]',
        components: [
          { name: 'startTimestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxClaimableSupply',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'supplyClaimed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'string', type: 'string' },
        ],
        indexed: false,
      },
      {
        name: 'resetEligibility',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'ClaimConditionsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'prevURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ContractURIUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRoyaltyRecipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newRoyaltyBps',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'DefaultRoyalty',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'platformFeeRecipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'flatFee',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'FlatPlatformFeeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'restriction',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
    ],
    name: 'OperatorRestriction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'prevOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'platformFeeRecipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'platformFeeBps',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'PlatformFeeInfoUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeType',
        internalType: 'enum IPlatformFee.PlatformFeeType',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'PlatformFeeTypeUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'PrimarySaleRecipientUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'royaltyRecipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyBps',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RoyaltyForToken',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'description',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'imageURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'animationURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'SharedMetadataUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'claimConditionIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'claimer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'receiver',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'startTokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'quantityClaimed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TokensClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: '_receiver', internalType: 'address', type: 'address' },
      { name: '_quantity', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'address', type: 'address' },
      { name: '_pricePerToken', internalType: 'uint256', type: 'uint256' },
      {
        name: '_allowlistProof',
        internalType: 'struct IDrop.AllowlistProof',
        type: 'tuple',
        components: [
          { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
        ],
      },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'claim',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'claimCondition',
    outputs: [
      { name: 'currentStartId', internalType: 'uint256', type: 'uint256' },
      { name: 'count', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveClaimConditionId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_conditionId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getClaimConditionById',
    outputs: [
      {
        name: 'condition',
        internalType: 'struct IClaimCondition.ClaimCondition',
        type: 'tuple',
        components: [
          { name: 'startTimestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxClaimableSupply',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'supplyClaimed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDefaultRoyaltyInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFlatPlatformFeeInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPlatformFeeInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPlatformFeeType',
    outputs: [
      {
        name: '',
        internalType: 'enum IPlatformFee.PlatformFeeType',
        type: 'uint8',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getRoleMember',
    outputs: [{ name: 'member', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleMemberCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getRoyaltyInfoForToken',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint16', type: 'uint16' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_conditionId', internalType: 'uint256', type: 'uint256' },
      { name: '_claimer', internalType: 'address', type: 'address' },
    ],
    name: 'getSupplyClaimedByWallet',
    outputs: [
      {
        name: 'supplyClaimedByWallet',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRoleWithSwitch',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_defaultAdmin', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_contractURI', internalType: 'string', type: 'string' },
      {
        name: '_trustedForwarders',
        internalType: 'address[]',
        type: 'address[]',
      },
      { name: '_saleRecipient', internalType: 'address', type: 'address' },
      { name: '_royaltyRecipient', internalType: 'address', type: 'address' },
      { name: '_royaltyBps', internalType: 'uint128', type: 'uint128' },
      { name: '_platformFeeBps', internalType: 'uint128', type: 'uint128' },
      {
        name: '_platformFeeRecipient',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTokenIdToClaim',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nextTokenIdToMint',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorRestriction',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'primarySaleRecipient',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_conditions',
        internalType: 'struct IClaimCondition.ClaimCondition[]',
        type: 'tuple[]',
        components: [
          { name: 'startTimestamp', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxClaimableSupply',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'supplyClaimed', internalType: 'uint256', type: 'uint256' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
          { name: 'metadata', internalType: 'string', type: 'string' },
        ],
      },
      { name: '_resetClaimEligibility', internalType: 'bool', type: 'bool' },
    ],
    name: 'setClaimConditions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
    name: 'setContractURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_royaltyRecipient', internalType: 'address', type: 'address' },
      { name: '_royaltyBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setDefaultRoyaltyInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_platformFeeRecipient',
        internalType: 'address',
        type: 'address',
      },
      { name: '_flatFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFlatPlatformFeeInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_restriction', internalType: 'bool', type: 'bool' }],
    name: 'setOperatorRestriction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newOwner', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_platformFeeRecipient',
        internalType: 'address',
        type: 'address',
      },
      { name: '_platformFeeBps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPlatformFeeInfo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_feeType',
        internalType: 'enum IPlatformFee.PlatformFeeType',
        type: 'uint8',
      },
    ],
    name: 'setPlatformFeeType',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_saleRecipient', internalType: 'address', type: 'address' },
    ],
    name: 'setPrimarySaleRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_recipient', internalType: 'address', type: 'address' },
      { name: '_bps', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRoyaltyInfoForToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_metadata',
        internalType: 'struct ISharedMetadata.SharedMetadataInfo',
        type: 'tuple',
        components: [
          { name: 'name', internalType: 'string', type: 'string' },
          { name: 'description', internalType: 'string', type: 'string' },
          { name: 'imageURI', internalType: 'string', type: 'string' },
          { name: 'animationURI', internalType: 'string', type: 'string' },
        ],
      },
    ],
    name: 'setSharedMetadata',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'sharedMetadata',
    outputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'description', internalType: 'string', type: 'string' },
      { name: 'imageURI', internalType: 'string', type: 'string' },
      { name: 'animationURI', internalType: 'string', type: 'string' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'startTokenId',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_subscription', internalType: 'address', type: 'address' },
    ],
    name: 'subscribeToRegistry',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalMinted',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_conditionId', internalType: 'uint256', type: 'uint256' },
      { name: '_claimer', internalType: 'address', type: 'address' },
      { name: '_quantity', internalType: 'uint256', type: 'uint256' },
      { name: '_currency', internalType: 'address', type: 'address' },
      { name: '_pricePerToken', internalType: 'uint256', type: 'uint256' },
      {
        name: '_allowlistProof',
        internalType: 'struct IDrop.AllowlistProof',
        type: 'tuple',
        components: [
          { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
          {
            name: 'quantityLimitPerWallet',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'pricePerToken', internalType: 'uint256', type: 'uint256' },
          { name: 'currency', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'verifyClaim',
    outputs: [{ name: 'isOverride', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__.
 */
export function useTw721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: tw721ABI, ...config } as UseContractReadConfig<
    typeof tw721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useTw721DefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTw721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"claimCondition"`.
 */
export function useTw721ClaimCondition<
  TFunctionName extends 'claimCondition',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'claimCondition',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"contractURI"`.
 */
export function useTw721ContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getActiveClaimConditionId"`.
 */
export function useTw721GetActiveClaimConditionId<
  TFunctionName extends 'getActiveClaimConditionId',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getActiveClaimConditionId',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useTw721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getClaimConditionById"`.
 */
export function useTw721GetClaimConditionById<
  TFunctionName extends 'getClaimConditionById',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getClaimConditionById',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getDefaultRoyaltyInfo"`.
 */
export function useTw721GetDefaultRoyaltyInfo<
  TFunctionName extends 'getDefaultRoyaltyInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getDefaultRoyaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getFlatPlatformFeeInfo"`.
 */
export function useTw721GetFlatPlatformFeeInfo<
  TFunctionName extends 'getFlatPlatformFeeInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getFlatPlatformFeeInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getPlatformFeeInfo"`.
 */
export function useTw721GetPlatformFeeInfo<
  TFunctionName extends 'getPlatformFeeInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getPlatformFeeInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getPlatformFeeType"`.
 */
export function useTw721GetPlatformFeeType<
  TFunctionName extends 'getPlatformFeeType',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getPlatformFeeType',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useTw721GetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoleMember"`.
 */
export function useTw721GetRoleMember<
  TFunctionName extends 'getRoleMember',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoleMember',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoleMemberCount"`.
 */
export function useTw721GetRoleMemberCount<
  TFunctionName extends 'getRoleMemberCount',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoleMemberCount',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getRoyaltyInfoForToken"`.
 */
export function useTw721GetRoyaltyInfoForToken<
  TFunctionName extends 'getRoyaltyInfoForToken',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getRoyaltyInfoForToken',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"getSupplyClaimedByWallet"`.
 */
export function useTw721GetSupplyClaimedByWallet<
  TFunctionName extends 'getSupplyClaimedByWallet',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'getSupplyClaimedByWallet',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"hasRole"`.
 */
export function useTw721HasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"hasRoleWithSwitch"`.
 */
export function useTw721HasRoleWithSwitch<
  TFunctionName extends 'hasRoleWithSwitch',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'hasRoleWithSwitch',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useTw721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useTw721IsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"name"`.
 */
export function useTw721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"nextTokenIdToClaim"`.
 */
export function useTw721NextTokenIdToClaim<
  TFunctionName extends 'nextTokenIdToClaim',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'nextTokenIdToClaim',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"nextTokenIdToMint"`.
 */
export function useTw721NextTokenIdToMint<
  TFunctionName extends 'nextTokenIdToMint',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'nextTokenIdToMint',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"operatorRestriction"`.
 */
export function useTw721OperatorRestriction<
  TFunctionName extends 'operatorRestriction',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'operatorRestriction',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"owner"`.
 */
export function useTw721Owner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useTw721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"primarySaleRecipient"`.
 */
export function useTw721PrimarySaleRecipient<
  TFunctionName extends 'primarySaleRecipient',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'primarySaleRecipient',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useTw721RoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"sharedMetadata"`.
 */
export function useTw721SharedMetadata<
  TFunctionName extends 'sharedMetadata',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'sharedMetadata',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"startTokenId"`.
 */
export function useTw721StartTokenId<
  TFunctionName extends 'startTokenId',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'startTokenId',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTw721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useTw721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useTw721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"totalMinted"`.
 */
export function useTw721TotalMinted<
  TFunctionName extends 'totalMinted',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'totalMinted',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTw721TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"verifyClaim"`.
 */
export function useTw721VerifyClaim<
  TFunctionName extends 'verifyClaim',
  TSelectData = ReadContractResult<typeof tw721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: tw721ABI,
    functionName: 'verifyClaim',
    ...config,
  } as UseContractReadConfig<typeof tw721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__.
 */
export function useTw721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tw721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof tw721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, TFunctionName, TMode>({
    abi: tw721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"approve"`.
 */
export function useTw721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof tw721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'approve', TMode>({
    abi: tw721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"burn"`.
 */
export function useTw721Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tw721ABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof tw721ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'burn', TMode>({
    abi: tw721ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"claim"`.
 */
export function useTw721Claim<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof tw721ABI, 'claim'>['request']['abi'],
        'claim',
        TMode
      > & { functionName?: 'claim' }
    : UseContractWriteConfig<typeof tw721ABI, 'claim', TMode> & {
        abi?: never
        functionName?: 'claim'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'claim', TMode>({
    abi: tw721ABI,
    functionName: 'claim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"grantRole"`.
 */
export function useTw721GrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof tw721ABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'grantRole', TMode>({
    abi: tw721ABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"initialize"`.
 */
export function useTw721Initialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof tw721ABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'initialize', TMode>({
    abi: tw721ABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"multicall"`.
 */
export function useTw721Multicall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'multicall'
        >['request']['abi'],
        'multicall',
        TMode
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<typeof tw721ABI, 'multicall', TMode> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'multicall', TMode>({
    abi: tw721ABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useTw721RenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof tw721ABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'renounceRole', TMode>({
    abi: tw721ABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useTw721RevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof tw721ABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'revokeRole', TMode>({
    abi: tw721ABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useTw721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof tw721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'safeTransferFrom', TMode>({
    abi: tw721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useTw721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof tw721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setApprovalForAll', TMode>({
    abi: tw721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setClaimConditions"`.
 */
export function useTw721SetClaimConditions<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setClaimConditions'
        >['request']['abi'],
        'setClaimConditions',
        TMode
      > & { functionName?: 'setClaimConditions' }
    : UseContractWriteConfig<typeof tw721ABI, 'setClaimConditions', TMode> & {
        abi?: never
        functionName?: 'setClaimConditions'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setClaimConditions', TMode>({
    abi: tw721ABI,
    functionName: 'setClaimConditions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setContractURI"`.
 */
export function useTw721SetContractUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setContractURI'
        >['request']['abi'],
        'setContractURI',
        TMode
      > & { functionName?: 'setContractURI' }
    : UseContractWriteConfig<typeof tw721ABI, 'setContractURI', TMode> & {
        abi?: never
        functionName?: 'setContractURI'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setContractURI', TMode>({
    abi: tw721ABI,
    functionName: 'setContractURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setDefaultRoyaltyInfo"`.
 */
export function useTw721SetDefaultRoyaltyInfo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setDefaultRoyaltyInfo'
        >['request']['abi'],
        'setDefaultRoyaltyInfo',
        TMode
      > & { functionName?: 'setDefaultRoyaltyInfo' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setDefaultRoyaltyInfo',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultRoyaltyInfo'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setDefaultRoyaltyInfo', TMode>({
    abi: tw721ABI,
    functionName: 'setDefaultRoyaltyInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setFlatPlatformFeeInfo"`.
 */
export function useTw721SetFlatPlatformFeeInfo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setFlatPlatformFeeInfo'
        >['request']['abi'],
        'setFlatPlatformFeeInfo',
        TMode
      > & { functionName?: 'setFlatPlatformFeeInfo' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setFlatPlatformFeeInfo',
        TMode
      > & {
        abi?: never
        functionName?: 'setFlatPlatformFeeInfo'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setFlatPlatformFeeInfo', TMode>({
    abi: tw721ABI,
    functionName: 'setFlatPlatformFeeInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOperatorRestriction"`.
 */
export function useTw721SetOperatorRestriction<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setOperatorRestriction'
        >['request']['abi'],
        'setOperatorRestriction',
        TMode
      > & { functionName?: 'setOperatorRestriction' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setOperatorRestriction',
        TMode
      > & {
        abi?: never
        functionName?: 'setOperatorRestriction'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setOperatorRestriction', TMode>({
    abi: tw721ABI,
    functionName: 'setOperatorRestriction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOwner"`.
 */
export function useTw721SetOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setOwner'
        >['request']['abi'],
        'setOwner',
        TMode
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<typeof tw721ABI, 'setOwner', TMode> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setOwner', TMode>({
    abi: tw721ABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeInfo"`.
 */
export function useTw721SetPlatformFeeInfo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setPlatformFeeInfo'
        >['request']['abi'],
        'setPlatformFeeInfo',
        TMode
      > & { functionName?: 'setPlatformFeeInfo' }
    : UseContractWriteConfig<typeof tw721ABI, 'setPlatformFeeInfo', TMode> & {
        abi?: never
        functionName?: 'setPlatformFeeInfo'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setPlatformFeeInfo', TMode>({
    abi: tw721ABI,
    functionName: 'setPlatformFeeInfo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeType"`.
 */
export function useTw721SetPlatformFeeType<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setPlatformFeeType'
        >['request']['abi'],
        'setPlatformFeeType',
        TMode
      > & { functionName?: 'setPlatformFeeType' }
    : UseContractWriteConfig<typeof tw721ABI, 'setPlatformFeeType', TMode> & {
        abi?: never
        functionName?: 'setPlatformFeeType'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setPlatformFeeType', TMode>({
    abi: tw721ABI,
    functionName: 'setPlatformFeeType',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPrimarySaleRecipient"`.
 */
export function useTw721SetPrimarySaleRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setPrimarySaleRecipient'
        >['request']['abi'],
        'setPrimarySaleRecipient',
        TMode
      > & { functionName?: 'setPrimarySaleRecipient' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setPrimarySaleRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'setPrimarySaleRecipient'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setPrimarySaleRecipient', TMode>({
    abi: tw721ABI,
    functionName: 'setPrimarySaleRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setRoyaltyInfoForToken"`.
 */
export function useTw721SetRoyaltyInfoForToken<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setRoyaltyInfoForToken'
        >['request']['abi'],
        'setRoyaltyInfoForToken',
        TMode
      > & { functionName?: 'setRoyaltyInfoForToken' }
    : UseContractWriteConfig<
        typeof tw721ABI,
        'setRoyaltyInfoForToken',
        TMode
      > & {
        abi?: never
        functionName?: 'setRoyaltyInfoForToken'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setRoyaltyInfoForToken', TMode>({
    abi: tw721ABI,
    functionName: 'setRoyaltyInfoForToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setSharedMetadata"`.
 */
export function useTw721SetSharedMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'setSharedMetadata'
        >['request']['abi'],
        'setSharedMetadata',
        TMode
      > & { functionName?: 'setSharedMetadata' }
    : UseContractWriteConfig<typeof tw721ABI, 'setSharedMetadata', TMode> & {
        abi?: never
        functionName?: 'setSharedMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'setSharedMetadata', TMode>({
    abi: tw721ABI,
    functionName: 'setSharedMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"subscribeToRegistry"`.
 */
export function useTw721SubscribeToRegistry<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'subscribeToRegistry'
        >['request']['abi'],
        'subscribeToRegistry',
        TMode
      > & { functionName?: 'subscribeToRegistry' }
    : UseContractWriteConfig<typeof tw721ABI, 'subscribeToRegistry', TMode> & {
        abi?: never
        functionName?: 'subscribeToRegistry'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'subscribeToRegistry', TMode>({
    abi: tw721ABI,
    functionName: 'subscribeToRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTw721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof tw721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof tw721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof tw721ABI, 'transferFrom', TMode>({
    abi: tw721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__.
 */
export function usePrepareTw721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTw721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareTw721Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"claim"`.
 */
export function usePrepareTw721Claim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'claim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'claim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'claim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareTw721GrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareTw721Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareTw721Multicall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareTw721RenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareTw721RevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareTw721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareTw721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setClaimConditions"`.
 */
export function usePrepareTw721SetClaimConditions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setClaimConditions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setClaimConditions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setClaimConditions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setContractURI"`.
 */
export function usePrepareTw721SetContractUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setContractURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setContractURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setContractURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setDefaultRoyaltyInfo"`.
 */
export function usePrepareTw721SetDefaultRoyaltyInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setDefaultRoyaltyInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setDefaultRoyaltyInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setDefaultRoyaltyInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setFlatPlatformFeeInfo"`.
 */
export function usePrepareTw721SetFlatPlatformFeeInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setFlatPlatformFeeInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setFlatPlatformFeeInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setFlatPlatformFeeInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOperatorRestriction"`.
 */
export function usePrepareTw721SetOperatorRestriction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setOperatorRestriction'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setOperatorRestriction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setOperatorRestriction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareTw721SetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeInfo"`.
 */
export function usePrepareTw721SetPlatformFeeInfo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeInfo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setPlatformFeeInfo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeInfo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPlatformFeeType"`.
 */
export function usePrepareTw721SetPlatformFeeType(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeType'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setPlatformFeeType',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setPlatformFeeType'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setPrimarySaleRecipient"`.
 */
export function usePrepareTw721SetPrimarySaleRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setPrimarySaleRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setPrimarySaleRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof tw721ABI,
    'setPrimarySaleRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setRoyaltyInfoForToken"`.
 */
export function usePrepareTw721SetRoyaltyInfoForToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setRoyaltyInfoForToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setRoyaltyInfoForToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setRoyaltyInfoForToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"setSharedMetadata"`.
 */
export function usePrepareTw721SetSharedMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'setSharedMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'setSharedMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'setSharedMetadata'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"subscribeToRegistry"`.
 */
export function usePrepareTw721SubscribeToRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'subscribeToRegistry'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'subscribeToRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'subscribeToRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tw721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTw721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tw721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: tw721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof tw721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__.
 */
export function useTw721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useTw721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useTw721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"ClaimConditionsUpdated"`.
 */
export function useTw721ClaimConditionsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'ClaimConditionsUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'ClaimConditionsUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'ClaimConditionsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"ContractURIUpdated"`.
 */
export function useTw721ContractUriUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'ContractURIUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'ContractURIUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'ContractURIUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"DefaultRoyalty"`.
 */
export function useTw721DefaultRoyaltyEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'DefaultRoyalty'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'DefaultRoyalty',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'DefaultRoyalty'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"FlatPlatformFeeUpdated"`.
 */
export function useTw721FlatPlatformFeeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'FlatPlatformFeeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'FlatPlatformFeeUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'FlatPlatformFeeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useTw721InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"OperatorRestriction"`.
 */
export function useTw721OperatorRestrictionEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'OperatorRestriction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'OperatorRestriction',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'OperatorRestriction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"OwnerUpdated"`.
 */
export function useTw721OwnerUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'OwnerUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'OwnerUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'OwnerUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"PlatformFeeInfoUpdated"`.
 */
export function useTw721PlatformFeeInfoUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'PlatformFeeInfoUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'PlatformFeeInfoUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'PlatformFeeInfoUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"PlatformFeeTypeUpdated"`.
 */
export function useTw721PlatformFeeTypeUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'PlatformFeeTypeUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'PlatformFeeTypeUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'PlatformFeeTypeUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"PrimarySaleRecipientUpdated"`.
 */
export function useTw721PrimarySaleRecipientUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'PrimarySaleRecipientUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'PrimarySaleRecipientUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'PrimarySaleRecipientUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useTw721RoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useTw721RoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useTw721RoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"RoyaltyForToken"`.
 */
export function useTw721RoyaltyForTokenEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'RoyaltyForToken'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'RoyaltyForToken',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'RoyaltyForToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"SharedMetadataUpdated"`.
 */
export function useTw721SharedMetadataUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'SharedMetadataUpdated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'SharedMetadataUpdated',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'SharedMetadataUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"TokensClaimed"`.
 */
export function useTw721TokensClaimedEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'TokensClaimed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'TokensClaimed',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'TokensClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tw721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTw721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof tw721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: tw721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof tw721ABI, 'Transfer'>)
}
